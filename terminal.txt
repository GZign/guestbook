-> Build the guestbook app:

* Completar dockefile

Change to the v1/guestbook directory
cd ../v1/guestbook

Export your namespace as an environment variable so that it can be used in subsequent commands
export MY_NAMESPACE=sn-labs-$USERNAME

Build the guestbook app using the Docker Build command.
docker build . -t us.icr.io/$MY_NAMESPACE/guestbook:v1

Push the image to IBM Cloud Container Registry.
docker push us.icr.io/$MY_NAMESPACE/guestbook:v1

Verify that the image was pushed successfully.
ibmcloud cr images

* Completar deployment

Apply the deployment using
kubectl apply -f deployment.yml

Open a New Terminal and enter the below command to view your application
kubectl port-forward deployment.apps/guestbook 3000:3000

Finaliza que podes entrar a la pagina


-> Autoscale the Guestbook application using Horizontal Pod Autoscaler:

Autoscale the Guestbook deployment 
kubectl autoscale deployment guestbook --cpu-percent=5 --min=1 --max=10

You can check the current status of the newly-made HorizontalPodAutoscaler
kubectl get hpa guestbook

Open another new terminal and enter the below command to generate load on the app to observe the autoscaling (Please ensure your port-forward command is running. In case you have stopped your application, please run the port-forward command to re-run the application at port 3000.)
kubectl run -i --tty load-generator --rm --image=busybox:1.36.0 --restart=Never -- /bin/sh -c "while sleep 0.01; do wget -q -O- <your app URL>; done"
url es https://gabozignone-3000.theiaopenshift-1-labs-prod-theiaopenshift-4-tor01.proxy.cognitiveclass.ai/

Run the below command to observe the replicas increase in accordance with the autoscaling
kubectl get hpa guestbook --watch

Run the below command to observe the details of the horizontal pod autoscaler
kubectl get hpa guestbook

Cerrar otros terminales (donde corre el servidor y el run de kubectl)


-> Perform Rolling Updates and Rollbacks on the Guestbook application:

* Cambiar index a voluntad

Run the below command to build and push your updated app image
docker build . -t us.icr.io/$MY_NAMESPACE/guestbook:v1 && docker push us.icr.io/$MY_NAMESPACE/guestbook:v1

* Update the values of the CPU in the deployment.yml to cpu: 5m and cpu: 2m as below

Apply the changes to the deployment.yml file
kubectl apply -f deployment.yml

Open a new terminal and run the port-forward command again to start the app
kubectl port-forward deployment.apps/guestbook 3000:3000

Run the below command to see the history of deployment rollouts
kubectl rollout history deployment/guestbook

Run the below command to see the details of Revision of the deployment rollout
kubectl rollout history deployments guestbook --revision=2

Run the below command to get the replica sets and observe the deployment which is being used now
kubectl get rs

Run the below command to undo the deploymnent and set it to Revision 1
kubectl rollout undo deployment/guestbook --to-revision=1

Run the below command to get the replica sets after the Rollout has been undone. The deployment being used would have changed as below
kubectl get rs


